{"version":3,"file":"static/js/874.1bb68035.chunk.js","mappings":"+NAIaA,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,8BACGF,EAASG,KAAI,YAAgD,IAA7CC,EAA4C,EAA5CA,GAAIC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,YACzC,OACE,SAAC,KAAD,WACE,UAAC,KAAD,CAAMC,GAAE,kBAAaJ,GAAoBK,MAAO,CAAEC,KAAMT,GAAxD,WACE,SAAC,KAAD,CACEU,IAAG,0CAAqCJ,GACxCK,IAAKN,KAEP,SAAC,KAAD,UAAWA,GAAkBD,MAL/B,UAAmCD,KAD1BA,EAUd,KAGN,EACD,W,uKCvBaS,EAAaC,EAAAA,GAAAA,KAAH,yJASVC,EAAeD,EAAAA,GAAAA,OAAH,+SAiBZE,EAAcF,EAAAA,GAAAA,MAAH,wP,SCvBXG,EAAa,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAC3B,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAaA,OACE,UAACR,EAAD,YACE,SAACG,EAAD,CAAaM,SAbA,SAAAC,GACfF,EAASE,EAAEC,OAAOC,MAAMC,cACzB,EAWoCD,MAAOL,EAAOO,KAAK,UACpD,SAACZ,EAAD,CAAca,QAXD,SAAAL,GACfA,EAAEM,iBACmB,KAAjBT,EAAMU,SAGVZ,EAAeE,GACfC,EAAS,IACV,EAIG,UACE,SAAC,MAAD,QAIP,E,iBC4BD,EAhDoB,WAAO,IAAD,EACxB,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOY,EAAP,KAAcC,EAAd,KACA,GAAqBb,EAAAA,EAAAA,WAAS,GAArBc,GAAT,eACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQ,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GA+B9C,OArBAC,EAAAA,EAAAA,YAAU,WAAM,wCAId,8GAE2BC,EAAAA,EAAAA,IAAkBH,GAF7C,UAG4B,KADlBrC,EAFV,QAGiByC,QACXT,EAAShC,GAEa,IAApBA,EAASyC,OANjB,sBAOY,IAAIC,MAAM,SAPtB,uDAUIT,EAAS,EAAD,IACRU,MAAM,EAAD,IAXT,0DAJc,sBACTN,GADS,mCAkBdO,EACD,GAAE,CAACP,KAGF,gCACG,KACD,SAACpB,EAAD,CAAYC,eAhCO,SAAA2B,GACjBA,IAAQR,IACVL,EAAS,IACTI,EAAgB,CAAEhB,MAAOyB,IAE5B,IA4BqB,IAAjBd,EAAMU,SACL,SAAC,KAAD,WACE,SAAC1C,EAAAA,SAAD,CAAUC,SAAU+B,QAK7B,C","sources":["components/FilmList/FilmList.jsx","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","components/SearchFilms/SearchFilms.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport { Item, Image, FilmName } from './FilmList.styled';\nimport PropTypes from 'prop-types';\n\nexport const FilmList = ({ response }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      {response.map(({ id, name, original_title, poster_path }) => {\n        return (\n          <Item key={id}>\n            <Link to={`/movies/${id}`} key={`${id}`} state={{ from: location }}>\n              <Image\n                src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n                alt={original_title}\n              />\n              <FilmName>{original_title || name}</FilmName>\n            </Link>\n          </Item>\n        );\n      })}\n    </>\n  );\n};\nexport default FilmList;\nFilmList.propTypes = {\n  response: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      poster_path: PropTypes.string,\n      original_title: PropTypes.string,\n    })\n  ),\n};\n","import styled from 'styled-components';\n\nexport const FormStyled = styled.form`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n  margin-top: 20px;\n  margin-bottom: 30px;\n`;\n\nexport const ButtonSearch = styled.button`\n  background-color: rgb(96, 96, 24);\n  width: 30px;\n  height: 30px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 5px;\n  border: none;\n  cursor: pointer;\n  transition-duration: 0.7s;\n\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\n\nexport const InputSearch = styled.input`\n  height: 30px;\n  width: 400px;\n  outline: none;\n  border: none;\n  border-radius: 5px;\n  padding-left: 10px;\n  color: rgb(96, 96, 24);\n  font-weight: 500;\n  font-size: 20px;\n  background-color: rgb(240, 240, 191);\n`;\n","import { AiOutlineSearch } from 'react-icons/ai';\nimport { useState } from 'react';\nimport { FormStyled, ButtonSearch, InputSearch } from './SearchForm.styled';\nimport PropTypes from 'prop-types';\n\nexport const SearchForm = ({ onHandleSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const onChange = e => {\n    setQuery(e.target.value.toLowerCase());\n  };\n  const onSubmit = e => {\n    e.preventDefault();\n    if (query.trim() === '') {\n      return;\n    }\n    onHandleSubmit(query);\n    setQuery('');\n  };\n  return (\n    <FormStyled>\n      <InputSearch onChange={onChange} value={query} type=\"text\" />\n      <ButtonSearch onClick={onSubmit}>\n        <AiOutlineSearch />\n      </ButtonSearch>\n    </FormStyled>\n  );\n};\nexport default SearchForm;\n\nSearchForm.propTypes = {\n  onHandleSubmit: PropTypes.func,\n};\n","import { fetchFilmsByQuery } from 'API/api';\nimport { useEffect, useState } from 'react';\nimport { FilmList } from '../FilmList/FilmList';\nimport { SearchForm } from '../SearchForm/SearchForm';\nimport { useSearchParams } from 'react-router-dom';\nimport { List } from 'components/FilmList/FilmList.styled';\n\nconst SearchFilms = () => {\n  const [films, setFilms] = useState([]);\n  const [, setError] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const filmName = searchParams.get('query') ?? '';\n\n  const onHandleSubmit = req => {\n    if (req !== filmName) {\n      setFilms([]);\n      setSearchParams({ query: req });\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    if (!filmName) {\n      return;\n    }\n    async function fetching() {\n      try {\n        const response = await fetchFilmsByQuery(filmName);\n        if (response.length !== 0) {\n          setFilms(response);\n        }\n        if (response.length === 0) {\n          throw new Error('error');\n        }\n      } catch (error) {\n        setError(error);\n        alert(error);\n      }\n    }\n    fetching();\n  }, [filmName]);\n\n  return (\n    <>\n      {' '}\n      <SearchForm onHandleSubmit={onHandleSubmit} />\n      {films.length !== 0 && (\n        <List>\n          <FilmList response={films} />\n        </List>\n      )}\n    </>\n  );\n};\n\nexport default SearchFilms;\n"],"names":["FilmList","response","location","useLocation","map","id","name","original_title","poster_path","to","state","from","src","alt","FormStyled","styled","ButtonSearch","InputSearch","SearchForm","onHandleSubmit","useState","query","setQuery","onChange","e","target","value","toLowerCase","type","onClick","preventDefault","trim","films","setFilms","setError","useSearchParams","searchParams","setSearchParams","filmName","get","useEffect","fetchFilmsByQuery","length","Error","alert","fetching","req"],"sourceRoot":""}