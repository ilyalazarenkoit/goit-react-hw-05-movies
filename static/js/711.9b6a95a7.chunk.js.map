{"version":3,"file":"static/js/711.9b6a95a7.chunk.js","mappings":"8QAEaA,EAAaC,EAAAA,GAAAA,GAAH,wGAOVC,EAAaD,EAAAA,GAAAA,GAAH,wGAMVE,EAAWF,EAAAA,GAAAA,GAAH,gD,SC6BrB,EAtCgB,WACd,OAA8BG,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAWC,EAAAA,EAAAA,MAAXD,OAgBR,OAdAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE2BC,EAAAA,EAAAA,IAAaH,GAFxC,QAEUI,EAFV,QAIiBC,OAAS,GACpBN,EAAWK,GALjB,gDAQIE,MAAM,EAAD,IART,0DADc,uBAAC,WAAD,wBAYdC,EACD,GAAE,CAACP,KAEF,iCACE,uCACA,SAACP,EAAD,UACGK,EAAQO,OAAS,EACdP,EAAQU,KAAI,SAAAC,GACV,IAAQC,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,QAChB,OACE,UAAChB,EAAD,YACE,UAACC,EAAD,WAAWc,EAAX,QACA,uBAAIC,MCfF,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CDaaG,GAKpB,IACD,iBAIX,C","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin-top: 15px;\n`;\n\nexport const ReviewItem = styled.li`\n  border: 1px solid rgb(96, 96, 24);\n  padding: 10px;\n  border-radius: 10px;\n`;\n\nexport const Reviewer = styled.h3`\n  margin-bottom: 10px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviews } from 'API/api';\nimport { Reviewer, ReviewItem, ReviewList } from './Reviews.styled';\nimport { nanoid } from 'nanoid';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { filmId } = useParams();\n\n  useEffect(() => {\n    async function getReviews() {\n      try {\n        const response = await fetchReviews(filmId);\n\n        if (response.length > 0) {\n          setReviews(response);\n        }\n      } catch (error) {\n        alert(error);\n      }\n    }\n    getReviews();\n  }, [filmId]);\n  return (\n    <>\n      <h2>Reviewers</h2>\n      <ReviewList>\n        {reviews.length > 0\n          ? reviews.map(reviewer => {\n              const { author, content } = reviewer;\n              return (\n                <ReviewItem key={nanoid()}>\n                  <Reviewer>{author}:</Reviewer>\n                  <p>{content}</p>\n                </ReviewItem>\n              );\n            })\n          : 'No Reviews'}\n      </ReviewList>\n    </>\n  );\n};\n\nexport default Reviews;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ReviewList","styled","ReviewItem","Reviewer","useState","reviews","setReviews","filmId","useParams","useEffect","fetchReviews","response","length","alert","getReviews","map","reviewer","author","content","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","nanoid"],"sourceRoot":""}