{"version":3,"file":"static/js/387.ba60e3de.chunk.js","mappings":"gRAEaA,EAAWC,EAAAA,GAAAA,GAAH,6HAQRC,EAAWD,EAAAA,GAAAA,GAAH,yGAMRE,EAAUF,EAAAA,GAAAA,IAAH,sGAOPG,EAAWH,EAAAA,GAAAA,IAAH,mI,SCyBrB,EA3Ca,WACX,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAWC,EAAAA,EAAAA,MAAXD,OAcR,OAbAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE2BC,EAAAA,EAAAA,GAAUH,GAFrC,QAEUI,EAFV,QAGiBC,QACXN,EAAQK,EAASE,MAAM,EAAG,KAJhC,gDAOIC,MAAM,EAAD,IAPT,0DADc,uBAAC,WAAD,wBAWdC,EACD,GAAE,CAACR,KAEF,SAACR,EAAD,UACGM,EAAKO,OACFP,EAAKW,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC/B,OACE,UAACnB,EAAD,WACGmB,GACC,SAAClB,EAAD,CACEmB,MAAM,MACNC,OAAO,MACPC,IAAG,0CAAqCH,GACxCI,IAAKN,IAGP,YAEF,UAACf,EAAD,YACE,oCAAYe,MACZ,mCAAWC,UAbAF,EAiBlB,IACD,iBAGT,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 20px;\n  gap: 20px;\n  justify-content: center;\n`;\n\nexport const CastItem = styled.li`\n  width: 220px;\n  background-color: rgb(160, 160, 87);\n  border-radius: 10px;\n`;\n\nexport const CastImg = styled.img`\n  display: block;\n  width: 220px;\n  height: 250px;\n  border-radius: 10px;\n`;\n\nexport const CastDesr = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 10px;\n  color: rgb(240, 240, 191);\n`;\n","import { useEffect, useState } from 'react';\nimport { fetchCast } from 'API/api';\nimport { useParams } from 'react-router-dom';\nimport { CastDesr, CastImg, CastItem, CastList } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { filmId } = useParams();\n  useEffect(() => {\n    async function getCast() {\n      try {\n        const response = await fetchCast(filmId);\n        if (response.length) {\n          setCast(response.slice(0, 10));\n        }\n      } catch (error) {\n        alert(error);\n      }\n    }\n    getCast();\n  }, [filmId]);\n  return (\n    <CastList>\n      {cast.length\n        ? cast.map(({ id, name, character, profile_path }) => {\n            return (\n              <CastItem key={id}>\n                {profile_path ? (\n                  <CastImg\n                    width=\"100\"\n                    height=\"130\"\n                    src={`https://image.tmdb.org/t/p/w500/${profile_path}`}\n                    alt={name}\n                  />\n                ) : (\n                  'NO PHOTO'\n                )}\n                <CastDesr>\n                  <h3>Actor: {name}</h3>\n                  <h3>Role: {character}</h3>\n                </CastDesr>\n              </CastItem>\n            );\n          })\n        : 'No Cast Found'}\n    </CastList>\n  );\n};\nexport default Cast;\n"],"names":["CastList","styled","CastItem","CastImg","CastDesr","useState","cast","setCast","filmId","useParams","useEffect","fetchCast","response","length","slice","alert","getCast","map","id","name","character","profile_path","width","height","src","alt"],"sourceRoot":""}